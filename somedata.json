[  {  
      "pk":1,
      "model":"sites.site",
      "fields":{  
         "domain":"suhails.in",
         "name":"Suhail blog"
      }
   },
   {  
      "pk":1,
      "model":"blog.tag",
      "fields":{  
         "name":"django",
         "created":"2014-06-19T06:52:04Z"
      }
   },
   {  
      "pk":2,
      "model":"blog.tag",
      "fields":{  
         "name":"django-forms",
         "created":"2014-06-19T06:52:09Z"
      }
   },
   {  
      "pk":3,
      "model":"blog.tag",
      "fields":{  
         "name":"email",
         "created":"2014-06-21T03:26:25Z"
      }
   },
   {  
      "pk":4,
      "model":"blog.tag",
      "fields":{  
         "name":"google",
         "created":"2014-06-21T03:26:40Z"
      }
   },
   {  
      "pk":5,
      "model":"blog.tag",
      "fields":{  
         "name":"github",
         "created":"2014-06-21T03:28:03Z"
      }
   },
   {  
      "pk":6,
      "model":"blog.tag",
      "fields":{  
         "name":"github-pages",
         "created":"2014-06-21T03:28:14Z"
      }
   },
   {  
      "pk":7,
      "model":"blog.tag",
      "fields":{  
         "name":"git",
         "created":"2014-06-21T03:28:21Z"
      }
   },
   {  
      "pk":8,
      "model":"blog.tag",
      "fields":{  
         "name":"django-templates",
         "created":"2014-06-22T02:44:01Z"
      }
   },
   {  
      "pk":9,
      "model":"blog.tag",
      "fields":{  
         "name":"html",
         "created":"2014-06-29T12:47:17Z"
      }
   },
   {  
      "pk":10,
      "model":"blog.tag",
      "fields":{  
         "name":"mathematics",
         "created":"2014-06-29T12:47:26Z"
      }
   },
   {  
      "pk":11,
      "model":"blog.tag",
      "fields":{  
         "name":"latex",
         "created":"2014-06-29T12:47:43Z"
      }
   },
   {  
      "pk":12,
      "model":"blog.tag",
      "fields":{  
         "name":"mathjar",
         "created":"2014-06-29T12:48:02Z"
      }
   },
   {  
      "pk":13,
      "model":"blog.tag",
      "fields":{  
         "name":"fifa_worldcup_2014",
         "created":"2014-07-01T09:08:44Z"
      }
   },
   {  
      "pk":14,
      "model":"blog.tag",
      "fields":{  
         "name":"videos",
         "created":"2014-07-01T09:08:50Z"
      }
   },
   {  
      "pk":15,
      "model":"blog.tag",
      "fields":{  
         "name":"select2",
         "created":"2014-07-02T18:18:07Z"
      }
   },
   {  
      "pk":16,
      "model":"blog.tag",
      "fields":{  
         "name":"multiselect",
         "created":"2014-07-02T18:18:16Z"
      }
   },
   {  
      "pk":17,
      "model":"blog.tag",
      "fields":{  
         "name":"jquery",
         "created":"2014-07-02T18:18:23Z"
      }
   },
   {  
      "pk":18,
      "model":"blog.tag",
      "fields":{  
         "name":"python",
         "created":"2014-07-04T03:17:22Z"
      }
   },
   {  
      "pk":19,
      "model":"blog.tag",
      "fields":{  
         "name":"shell",
         "created":"2014-07-04T03:17:54Z"
      }
   },
   {  
      "pk":20,
      "model":"blog.tag",
      "fields":{  
         "name":"os",
         "created":"2014-07-04T03:17:57Z"
      }
   },
   {  
      "pk":21,
      "model":"blog.tag",
      "fields":{  
         "name":"openshift",
         "created":"2014-07-13T02:58:24Z"
      }
   },
   {  
      "pk":22,
      "model":"blog.tag",
      "fields":{  
         "name":"http",
         "created":"2014-07-13T22:38:11Z"
      }
   },
   {  
      "pk":23,
      "model":"blog.tag",
      "fields":{  
         "name":"status_codes",
         "created":"2014-07-13T22:38:27Z"
      }
   },
   {  
      "pk":24,
      "model":"blog.tag",
      "fields":{  
         "name":"Arvixe",
         "created":"2014-08-15T18:12:55Z"
      }
   },
   {  
      "pk":25,
      "model":"blog.tag",
      "fields":{  
         "name":"css",
         "created":"2014-08-23T12:38:01Z"
      }
   },
   {  
      "pk":26,
      "model":"blog.tag",
      "fields":{  
         "name":"angularjs",
         "created":"2014-10-09T02:14:20Z"
      }
   },
   {  
      "pk":27,
      "model":"blog.tag",
      "fields":{  
         "name":"javascript",
         "created":"2014-10-09T02:14:31Z"
      }
   },
   {  
      "pk":28,
      "model":"blog.tag",
      "fields":{  
         "name":"celery",
         "created":"2014-10-16T01:33:28Z"
      }
   },
   {  
      "pk":29,
      "model":"blog.tag",
      "fields":{  
         "name":"scp",
         "created":"2014-11-11T10:54:48Z"
      }
   },
   {  
      "pk":30,
      "model":"blog.tag",
      "fields":{  
         "name":"webfaction",
         "created":"2014-11-11T10:54:59Z"
      }
   },
   {  
      "pk":31,
      "model":"blog.tag",
      "fields":{  
         "name":"exam",
         "created":"2014-11-24T18:51:06Z"
      }
   },
   {  
      "pk":1,
      "model":"blog.blog",
      "fields":{  
         "content":"Start a Django Project\r\n======================\r\n\r\n**1). Create a project: django-admin.py startproject sample**\r\n\r\nnow a folder(**sample**) is created::\r\n\t\r\n\tsample/\r\n\t\tmanage.py\r\n\t\tsample/\r\n\t\t\t__init__.py\r\n\t\t\tsettings.py\r\n\t\t\turls.py\r\n\t\t\twsgi.py\t\r\n\r\n**2). On setting.py add:**::\r\n\t\r\n\tMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\tMEDIA_URL = '/media/'\r\n\r\n**4). `urls.py` add:**::\r\n\r\n\t...<other imports>...\r\n\tfrom django.conf import settings\r\n\tfrom django.conf.urls.static import static\r\n\t\r\n\turlpatterns = patterns('',\r\n\t\turl(r'^upload/$', 'uploader.views.home', name='imageupload'),\r\n\t\t...<other url patterns>...\r\n\t)+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\nCreate a Django App\r\n===================\r\n\r\n**5). Create an app: `python manage.py startapp uploader`**\r\n\r\n**6). Now a folder(`uploader`) with these files are created:**\r\n::\r\n\r\n\tuploader/\r\n\t\t__init__.py\r\n\t\tmodels.py\r\n\t\tadmin.py\r\n\t\ttests.py\r\n\t\tviews.py\t\t\t\r\n\t\t\r\n\r\n**7). On `setting.py` -> `INSTALLED_APPS` add `'uploader',`, ie:**\r\n::\r\n\r\n\tINSTALLED_APPS = (\r\n\t\t...\r\n\t\t'uploader',\r\n\t\t...\r\n\t)\r\n\r\n\r\n**8) update `models.py`**\r\n::\r\n\r\n\tfrom django.db import models\r\n\tfrom django.forms import ModelForm\r\n\r\n\tclass Upload(models.Model):\r\n\t    pic = models.ImageField(\"Image\", upload_to=\"images/\")    \r\n\t    upload_date=models.DateTimeField(auto_now_add =True)\r\n\r\n\t# FileUpload form class.\r\n\tclass UploadForm(ModelForm):\r\n\t\tclass Meta:\r\n\t\t\tmodel = Upload\r\n\r\n\r\n**9) update `views.py`**\r\n::\r\n\r\n\tfrom django.shortcuts import render\r\n\tfrom uploader.models import UploadForm,Upload\r\n\tfrom django.http import HttpResponseRedirect\r\n\tfrom django.core.urlresolvers import reverse\r\n\t# Create your views here.\r\n\tdef home(request):\r\n\t\tif request.method==\"POST\":\r\n\t\t\timg = UploadForm(request.POST, request.FILES)\t\t\r\n\t\t\tif img.is_valid():\r\n\t\t\t\timg.save()\t\r\n\t\t\t\treturn HttpResponseRedirect(reverse('imageupload'))\r\n\t\telse:\r\n\t\t\timg=UploadForm()\r\n\t\timages=Upload.objects.all()\r\n\t\treturn render(request,'home.html',{'form':img,'images':images})\r\n\r\n\r\n**10). Create a folder `templates` and create a file `home.html`:**\r\n::\r\n\r\n\t<div style=\"padding:40px;margin:40px;border:1px solid #ccc\">\r\n\t\t<h1>picture</h1>\r\n\t\t<form action=\"#\" method=\"post\" enctype=\"multipart/form-data\">\r\n\t\t\t{% csrf_token %} {{form}} \r\n\t\t\t<input type=\"submit\" value=\"Upload\" />\r\n\t\t</form>\r\n\t\t{% for img in images %}\r\n\t\t\t{{forloop.counter}}.<a href=\"{{ img.pic.url }}\">{{ img.pic.name }}</a>\r\n\t\t\t({{img.upload_date}})<hr />\r\n\t\t{% endfor %}\r\n\t</div>\r\n\r\n\r\nFinal Project tree:\r\n===================\r\n::\r\n\r\n\tsample/\r\n\t\tmanage.py\r\n\t\tsample/\r\n\t\t\t__init__.py\r\n\t\t\tsettings.py\r\n\t\t\turls.py\r\n\t\t\twsgi.py\t\t\t\t\r\n\t\tuploader/\r\n\t\t\t__init__.py\r\n\t\t\tmodels.py\r\n\t\t\tviews.py\t\t\t\r\n\t\t\ttemplates/\r\n\t\t\t\thome.html \r\n\r\n\r\n11). Syncronize database and runserver:\r\n=======================================\r\n::\r\n\r\n\tpython manage.py syncdb\r\n\tpython manage.py runserver\r\n\r\n\tvisit <http://localhost.com:8000>",
         "updated":"2014-06-19T07:00:59Z",
         "created":"2014-06-19T07:00:59Z",
         "tags":[  
            1,
            2
         ],
         "title":"A minimal Django file upload example"
      }
   },
   {  
      "pk":2,
      "model":"blog.blog",
      "fields":{  
         "content":"###First Create an Application specific password\r\n\r\n1. Visit your [Google Account security page](https://www.google.com/settings/security).\r\n2. In the `2-Step Verification` box, click `Settings`(if there is no settings link, you may want to create a new one. you can skip step 3 & 4).\r\n3. Click the tab for `App-specific passwords`.\r\n4. Click `Manage your application specific passwords`.\r\n5. Under the `Application-specific passwords` section, enter a descriptive name for the application you want to authorize, such as \"Django gmail\" then click `Generate application-specific password` button.\r\n6. note down the password. for example: `smbumqjiurmqrywn` ![password][1]\r\n\r\n### Then add the appropriate values to settings.py:\r\n\r\n    EMAIL_HOST = 'smtp.gmail.com'\r\n    EMAIL_HOST_USER = 'your-username@gmail.com'\r\n    EMAIL_HOST_PASSWORD = 'Application spectific password(for eg: smbumqjiurmqrywn)'\r\n    EMAIL_PORT = 587\r\n    EMAIL_USE_TLS = True\r\n\r\n\r\n### You can use the shell to test it:\r\n\r\n    python manage.py shell\r\n    >>> from django.core.mail import send_mail\r\n    >>> send_mail('Test', 'This is a test', 'your@email.com', ['toemail@email.com'],\r\n         fail_silently=False)\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/fNxSx.png",
         "updated":"2014-06-21T03:26:43Z",
         "created":"2014-06-21T03:26:43Z",
         "tags":[  
            1,
            3,
            4
         ],
         "title":"Mail setup on django using Gmail"
      }
   },
   {  
      "pk":3,
      "model":"blog.blog",
      "fields":{  
         "content":"\r\n###1) Get out of current repo and make a fresh clone:\r\n    \r\n    cd ..\r\n    git clone https://github.com/danielfpedro/simple-modal.git simple-modal-webpage\r\n\r\n### 2) Create a gh-pages branch(without any parents) and remove all content from the working directory and index:\r\n\r\n    cd simple-modal-webpage\r\n    git checkout --orphan gh-pages\r\n    git rm -rf . \r\n\r\n### 3) Add content and push\r\n\r\n    echo \"My GitHub Page\" > index.html\r\n    git add index.html\r\n    git commit -a -m \"First pages commit\"\r\n    git push origin gh-pages\r\n\r\nAfter your push to the `gh-pages` branch, your Project Page will be available at `danielfpedro.github.io/simple-modal`\r\n\r\n###4) Delete the cloned folder(`simple-modal-webpage`) and pull the branch `gh-pages` in original repo(`simple-modal`):\r\n\r\n    cd ..\r\n    rm -r simple-modal-webpage\r\n    cd simple-modal\r\n    git fetch   \r\n\r\n### 5) that is it, now you have 1 more branch `gh-pages`. use it to commit changes for github webpage:\r\n\r\n    git checkout gh-pages\r\n    <make changes to documentation>\r\n    git add .\r\n    git commit -m \"documentation improvements\"\r\n    git push -u origin gh-pages\r\n    \r\n    \r\n",
         "updated":"2014-07-03T05:56:58Z",
         "created":"2014-06-21T03:28:28Z",
         "tags":[  
            5,
            6,
            7
         ],
         "title":"Publish pages in Github"
      }
   },
   {  
      "pk":4,
      "model":"blog.blog",
      "fields":{  
         "content":"This is an update of the [stackoverflow_answer](http://stackoverflow.com/a/2568581/2351696)\r\n\r\nSay your history is\r\n\r\n    $ git log --pretty=oneline\r\n    a931ac7c808e2471b22b5bd20f0cad046b1c5d0d c\r\n    b76d157d507e819d7511132bdb5a80dd421d854f b\r\n    df239176e1a2ffac927d8b496ea00d5488481db5 a\r\n\r\nThat is, `a` was the first commit, then `b`, and finally `c`.\r\n\r\nRunning `git rebase --interactive HEAD~2` gives you an editor with\r\n\r\n    pick b76d157 b\r\n    pick a931ac7 c\r\n\r\n    # Rebase df23917..a931ac7 onto df23917\r\n    #\r\n    # Commands:\r\n    #  p, pick = use commit\r\n    #  r, reword = use commit, but edit the commit message\r\n    #  e, edit = use commit, but stop for amending\r\n    #  s, squash = use commit, but meld into previous commit\r\n    #  f, fixup = like \"squash\", but discard this commit's log message\r\n    #\r\n    # If you remove a line here THAT COMMIT WILL BE LOST.\r\n    # However, if you remove everything, the rebase will be aborted.\r\n   \r\n\r\n**Note:**You cannot squash the latest commit(b's). You can squash old commits(for eg: `c`),ie:\r\n\r\n    pick b76d157 b\r\n    s a931ac7 c\r\n\r\nand save-quitting your editor, you'll get another editor whose contents are\r\n\r\n    # This is a combination of 2 commits.\r\n    # The first commit's message is:\r\n\r\n    b\r\n\r\n    # This is the 2nd commit message:\r\n\r\n    c\r\n\r\nWhen you save and quit, the contents of the edited file become commit message of the new combined commit:\r\n\r\n    $ git log --pretty=oneline\r\n    18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c\r\n    df239176e1a2ffac927d8b496ea00d5488481db5 a",
         "updated":"2014-10-22T08:38:19Z",
         "created":"2014-06-21T03:46:06Z",
         "tags":[  
            7
         ],
         "title":"Merge two commits into one."
      }
   },
   {  
      "pk":5,
      "model":"blog.blog",
      "fields":{  
         "content":"### a sample TEMPLATE_CONTEXT_PROCESSORS\r\n\r\nadd a file say `custom_processors.py` to any of your app with these codes:\r\n\r\n    def greetings(request):\r\n        from datetime import datetime\t\r\n        curtime=datetime.today()\r\n\t\r\n        if curtime.hour < 12:\r\n            msg= \"Good Morning!\"\r\n        elif curtime.hour >= 12 and curtime.hour < 18:\r\n            msg= \"Good AfterNoon!\"\r\n        else:\r\n            msg= \"Good Evening!\"\r\n\r\n        return {\r\n                'say_hello':msg,\r\n                'say_bye':\"Good Bye\",\r\n            }\r\n\r\nadd it to `settings.py` `TEMPLATE_CONTEXT_PROCESSORS` like:\r\n\r\n    TEMPLATE_CONTEXT_PROCESSORS=(\r\n        ...\r\n        '<appname>.custom_processors.greetings',\r\n    )\r\n\r\nif there isn't any `TEMPLATE_CONTEXT_PROCESSORS` variable in `settings.py` then import and append it:\r\n\r\n    from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS\r\n    TEMPLATE_CONTEXT_PROCESSORS += ('<appname>.custom_processors.greetings',)\r\n\r\nNow you can use `{{say_hello}}` or `{{say_bye}}` in any of your template. It just output `Good Morning/AfterNoon/Evening` (based on server time) , and output `Good Bye` for second **context**.",
         "updated":"2014-09-19T01:08:16Z",
         "created":"2014-06-22T02:44:12Z",
         "tags":[  
            1,
            8
         ],
         "title":"Creating a Custom TEMPLATE_CONTEXT_PROCESSORS in Django."
      }
   },
   {  
      "pk":6,
      "model":"blog.blog",
      "fields":{  
         "content":"Today I am going to write about how to put mathematical formulas into html.\r\n\r\nI found most people solve this problem by create images of the formulas and put that image in appropriate places by tag `<img>`. \r\n\r\nThat is a bad approach, since \r\n\r\n+ it is hard to store images.\r\n+ Loading time will be very slow\r\n+ hard to edit the formulas\r\n\r\nSo I searched and find a wonderful java-script library  [**Mathjar**](http://www.mathjax.org/).\r\n\r\nHere a basic [jsfiddel demo](http://jsfiddle.net/sgJ59/)",
         "updated":"2014-06-29T12:58:19Z",
         "created":"2014-06-29T12:58:19Z",
         "tags":[  
            9,
            10,
            11,
            12
         ],
         "title":"Generate special mathematical symbols and formulae in HTML."
      }
   },
   {  
      "pk":8,
      "model":"blog.blog",
      "fields":{  
         "content":"please refer: [this](http://www.southcoastweb.co.uk/jquery-select2-ajax-tutorial/) and [this so answer](http://stackoverflow.com/a/18497409/2351696)\r\n\r\n## urls.py\r\n\r\n    url(r'^ajax/(pincodes)/$','ajax_requests'),\r\n\r\n## view.py\r\n\r\n    def ajax_requests(request,param):\r\n        if param=='pincodes':\r\n            q=request.GET['q']\r\n            resp=[dict(id=c.pk,text=c.code_postal) for c in Pincode.objects.filter(code_postal__contains=q)[:10]]\r\n            return HttpResponse(json.dumps(resp), content_type=\"application/json\")    \r\n\r\n## template.html\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"select2/select2.css\" %}\">\r\n    <script src=\"{% static \"select2/select2.js\" %}\"></script>\r\n\r\n    <script type=\"text/javascript\"> \r\n    $(document).ready(function () {\r\n      var $cmb_multi = $('#id_code_postal_immo');  \r\n      $cmb_multi.removeClass('form-control');  \r\n      $cmb_multi.select2({\r\n        multiple: true,\r\n        placeholder: \"Pick Postal codes\",\r\n        minimumInputLength: 2,\r\n        ajax: {\r\n          url: \"/frontprop/ajax/pincodes/\",\r\n          dataType: 'json',\r\n          data: function (term, page) {\r\n            return { q: term};\r\n          },\r\n          results: function (data, page) {\r\n            return { results: data };\r\n          }\r\n        }\r\n      });\r\n    });\r\n    </script>",
         "updated":"2014-07-02T18:20:33Z",
         "created":"2014-07-02T18:20:33Z",
         "tags":[  
            15,
            16,
            17
         ],
         "title":"simple jquery SELECT2 ajax example"
      }
   },
   {  
      "pk":9,
      "model":"blog.blog",
      "fields":{  
         "content":"If you ever find that you accidentally left something out of your last commit, be it a file or an extra change to a file that you just committed, don't worry. It can easily be fixed\r\n\r\nAll you have to do is stage the extra changes like you would for a normal commit:\r\n\r\n    git add .\r\n\r\nAnd then just commit with the `--amend` argument.\r\n\r\n    git commit --amend\r\n\r\nYou will be prompted with the previous commit message as a default. save-quitting your editor, You're done.\r\n\r\nyou can check git graphical tools(like `gitg` or `gitk`) to see your amended commit with the extra changes.",
         "updated":"2014-07-03T07:01:02Z",
         "created":"2014-07-03T07:01:02Z",
         "tags":[  
            7
         ],
         "title":"git add files to last commit"
      }
   },
   {  
      "pk":10,
      "model":"blog.blog",
      "fields":{  
         "content":"The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes.\r\nThe recommended way to launch `subprocesses` is to use the following convenience functions.\r\n\r\n## Call \r\n\r\nTo run an external command without interacting with it, Use the call() function. This module intends to replace `os.system`.\r\n\r\n    >>> import subprocess\r\n    >>> subprocess.call(['ls', '-1'])\r\n    Bioinformatics.pdf\r\n    bitbucket\r\n    blender-doc.pdf\r\n    ...\r\n\r\n## Popen\r\n\r\nThe underlying process creation and management in this module is handled by the Popen class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions.\r\nThis is intended as a replacement for `os.popen`.\r\n\r\n    >>> subprocess.Popen(['ls','-l'])",
         "updated":"2014-07-04T03:49:01Z",
         "created":"2014-07-04T03:18:02Z",
         "tags":[  
            18,
            19,
            20
         ],
         "title":"Call External Shell Commands in Python using the subprocess Module"
      }
   },
   {  
      "pk":11,
      "model":"blog.blog",
      "fields":{  
         "content":"## Introduction\r\n\r\n[Django-messages](https://github.com/arneb/django-messages) enables your users to send private messages to each other. \r\n\r\nEvery user has an\r\n\r\n* Inbox\r\n* Compose Message\r\n* Outbox\r\n* Trash \r\n\r\nMessages can be composed and there is an easy, url-based approach to preloading the compose-form with the recipient-user, which makes it extremely easy to put \"send xyz a message\" links on a profile-page.\r\n\r\n## Using django-messages\r\n\r\nsee [this commit](https://github.com/suhailvs/django-messages/commit/2a7879148a4df557e4978440bd5c49f999822689) to take a quick look.\r\n\r\n**Install it:**\r\n\r\n    pip install django-messages\r\n\r\n**Add `django_messages` to the `INSTALLED_APPS` in settings.py:**\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'django_messages',\r\n        ...\r\n    )\r\n\r\n**Add urls to `urls.py`**\r\n\r\n    urlpatterns = patterns(''\r\n        ...\r\n        (r'^messages/', include('django_messages.urls')),\r\n        ...\r\n    )\r\n\r\n**Templates:**\r\nYou must have base template with the name `base.html` which defines a `block content` and a `block sidebar`. for eg :\r\n\r\n`../templates/base.html`:\r\n\r\n    {% block content %}\r\n    {% endblock %}\r\n    <hr>\r\n    {% block sidebar %}\r\n    {% endblock %}\r\n\r\nthat's it now you can vist **http://localhost:8000/messages/inbox**\r\n\r\n## Examples\r\n\r\nHere is a very [Basic example](https://github.com/suhailvs/django-messages/tree/master/basic_example). ",
         "updated":"2014-07-11T03:10:50Z",
         "created":"2014-07-11T03:10:50Z",
         "tags":[  
            1,
            3
         ],
         "title":"Django messages: A user-to-user messaging system for Django"
      }
   },
   {  
      "pk":12,
      "model":"blog.blog",
      "fields":{  
         "content":"\r\n## rhc setup using multiple accounts.\r\n\r\n    rhc setup -l username1\r\n    rhc app create <appname> <cartridge>    \r\n    rhc account logout\r\n    rhc setup -l username2\r\n    rhc app create mysite python-2.7\r\n\r\n## to see the log\r\n\r\n    rhc tail <appname>\r\n\r\n## a basic rhc `wgi.py` file:\r\n\r\n    #!/usr/bin/python\r\n    import os,sys\r\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'poynting.settings'\r\n    sys.path.append(os.path.join(os.environ['OPENSHIFT_REPO_DIR'],'odesk_poynting'))\r\n\r\n    virtenv = os.environ['OPENSHIFT_PYTHON_DIR'] + '/virtenv/'\r\n    virtualenv = os.path.join(virtenv, 'bin/activate_this.py')\r\n    try:\r\n        execfile(virtualenv, dict(__file__=virtualenv))\r\n    except IOError:\r\n        pass\r\n    #\r\n    # IMPORTANT: Put any additional includes below this line.  If placed above this\r\n    # line, it's possible required libraries won't be in your searchable path\r\n    #\r\n    from django.core.handlers import wsgi\r\n    application = wsgi.WSGIHandler()\r\n\r\n## serve static files:\r\n \r\nadd `static_root` in settings.py::\r\n\r\n    STATIC_ROOT = os.path.join(BASE_DIR,<django_app_foldername>,'static_root')\r\n\r\nin `urls.py` add:\r\n\r\n    from django.conf.urls.static import static\r\n    from django.conf import settings\r\n    urlpatterns = patterns('',\r\n    .......\r\n    )+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\r\n\r\nthen run `python mange.py collectstatic`",
         "updated":"2014-07-13T03:05:35Z",
         "created":"2014-07-13T03:02:01Z",
         "tags":[  
            1,
            19,
            20,
            21
         ],
         "title":"Openshift django site hosting and RHC Tool usage: a beginners guide."
      }
   },
   {  
      "pk":13,
      "model":"blog.blog",
      "fields":{  
         "content":"# 2xx Success \r\n\r\n### 200 OK ###\r\n\r\nThis class of status codes indicates the action requested by the client was received, understood, accepted and processed successfully.\r\n\r\n### 201 Created ###\r\n\r\nThe request has been fulfilled and resulted in a new resource being created.\r\n\r\n### 202 Accepted ###\r\n\r\nThe request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.\r\n\r\n### 203 Non-Authoritative Information ###\r\n\r\nThe server successfully processed the request, but is returning information that may be from another source.\r\n\r\n### 204 No Content ###\r\n\r\nThe server successfully processed the request, but is not returning any content. Usually used as a response to a successful delete request.\r\n\r\n### 205 Reset Content ###\r\n\r\nThe server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.\r\n\r\n# 3xx Redirection\r\n\r\n### 300 Multiple Choices\r\n\r\nIndicates multiple options for the resource that the client may follow. \r\n\r\n### 301 Moved Permanently\r\n\r\nThe requested page has moved to a new URL \r\n\r\n### 302 Found\r\n\r\nThe requested page has moved temporarily to a new URL \r\n\r\n# 4xx Client Error\r\n\r\n### 400 Bad Request\r\n\r\nThe request cannot be fulfilled due to bad syntax.\r\n\r\n### 401 Unauthorized\r\n\r\nSimilar to ''403 Forbidden'', but specifically for use when authentication is required and has failed or has not yet been provided. \r\n\r\n### 403 Forbidden\r\n\r\nThe request was a valid request, but the server is refusing to respond to it. \r\n\r\n### 404 Not Found\r\n\r\nThe requested page could not be found but may be available again in the future\r\n\r\n# 5xx: Server Error\r\n\r\n### 500 Internal Server Error\r\n\r\nA generic error message, given when no more specific message is suitable\r\n\r\n## 501 Not Implemented\r\n\r\nThe server either does not recognize the request method, or it lacks the ability to fulfill the request. ",
         "updated":"2014-07-13T22:56:19Z",
         "created":"2014-07-13T22:38:53Z",
         "tags":[  
            22,
            23
         ],
         "title":"List of Hypertext Transfer Protocol (HTTP) response status codes."
      }
   },
   {  
      "pk":14,
      "model":"blog.blog",
      "fields":{  
         "content":"Arvixe web hosting don't support `mod-python`, `mod-wsgi`, `fast-cgi`...etc. The only way is using `cgi`:\r\n\r\n# ssh into the server #\r\n\r\nOpen up a terminal(`alt+ctrl+t`) and log into the server:\r\n\r\n    $ ssh username@yoursite.com\r\n\r\n# Install python #\r\n\r\nWe have a bunch of things to do here: install python, install django, optionally install virtualenv, create the cgi script. First off, we need to get a newer version of python installed to work with Django. Create a folder `projects` to store our stuffs. I like to put my downloaded software in a directory called `projects/downloads`.\r\n\r\n    $ mkdir projects\r\n    $ cd projects\r\n    $ mkdir downloads\r\n    $ cd downloads\r\n    $ wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz --no-check-certificate\r\n    $ tar -xzf Python-2.7.8.tgz\r\n    $ cd Python-2.7.8\r\n    $ ./configure\r\n    $ make altinstall prefix=~ exec-prefix=~\r\n    $ cd ~/bin\r\n    $ ln -s python2.7 python\r\n    $ cd\r\n    $ echo \"alias python='~/bin/python'\" >> .profile\r\n\r\nThis installs python in your home directory.\r\n\r\n# Install Django & Virtualenv#\r\n\r\n## install virtualenv ##\r\n\r\n    $ cd ~/projects/downloads\r\n    $ wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.11.6.tar.gz\r\n    $ tar -xzf virtualenv-1.11.6.tar.gz \r\n    $ cd virtualenv-1.11.6\r\n    $ python2.7 setup.py install\r\n\r\n## create a virtualenv & install Django ##\r\n\r\n    $ cd ~/projects\r\n    $ mkdir Envs\r\n    $ cd Envs/\r\n    $ virtualenv myenv\r\n    $ source myenv/bin/activate\r\n    $ pip install django\r\n\r\n# Make the cgi application #\r\n\r\nOk, now that we are done installing things, we need to tell Apache how to find your web application. For this example, I'm going to assume that we already have a working django application located in the directory:\r\n\r\n    /home/username/projects/repos/mydjangoapp/\r\n    # or you can create a new django project(directory repos) by run:\r\n    # django-admin.py startproject mydjangoapp\r\n\r\nYour web app most likely uses static files, so we make a static directory to hold them. \r\n\r\n    $ cd ~/public_html\r\n    $ mkdir static\r\n\r\nNext, get the cgi script for django and put it in your cgi-bin directory and make it executable.\r\n\r\n    $ cd ~/public_html/cgi-bin\r\n    $ wget https://code.djangoproject.com/raw-attachment/ticket/2407/django.cgi\r\n    $ chmod +x django.cgi\r\n\r\nOpen it up in a text editor and change the following lines to tell it where to find your python installation and django application\r\n\r\n    #!/home/username/bin/python\r\n    sys.path.append(\"/home/username/projects/repos/mydjangoapp\")\r\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'mydjangoapp.settings'\r\n   \r\n    # activate the virtualenv\r\n    virtualenv=\"/home/username/projects/Envs/myenv/bin/activate_this.py\"\r\n    execfile(virtualenv, dict(__file__=virtualenv))\r\n\r\n# Configure Apache #\r\n\r\nCreate a `.htaccess` file in the `~/public_html/` directory with your favorite editor and add the following contents:\r\n\r\n    AddHandler cgi-script .cgi\r\n    RewriteEngine On\r\n    RewriteRule ^/(static.*)$ /$1 [QSA,L,PT]\r\n    RewriteRule ^/(cgi-bin.*)$ /$1 [QSA,L,PT]\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteRule ^(.*)$ /cgi-bin/django.cgi/$1 [QSA,L]\r\n\r\nThe last line tells the server to redirect all requests to the django.cgi script. However, we still want static request to go to the static directory.\r\n\r\nSo that should be it. Visit your your website in a browser.",
         "updated":"2014-08-17T12:43:57Z",
         "created":"2014-08-15T18:25:10Z",
         "tags":[  
            1,
            24
         ],
         "title":"Installing Django on Arvixe web hosting"
      }
   },
   {  
      "pk":15,
      "model":"blog.blog",
      "fields":{  
         "content":"# Level 1.1: Getting Started(Directive, Module, Expressions) #\r\n\r\n## Module ##\r\n\r\nNothing but Javascript Angular codes\r\n\r\nfor eg:\r\n\t\r\n\tvar myapp=angular.module('store',[]);\r\n\r\n## Directive ##\r\n\r\nA Directive is a marker on an HTML tag that tells Angular to run or reference some Javascript Code.\r\n\r\nfor eg `ng-app`:\r\n\t\r\n\t<html ng-app=\"store\">\r\n\r\n*this `ng-app` directive creates an angular application by running Javascript Angular module `store`*\r\n\r\n\r\n## Expressions ##\r\n\r\n\t{{3+4+5}}\r\n\r\n\r\n## full example ##\r\n\r\n[live demo jsbin](http://jsbin.com/fegiwofeyoge/1/edit)  \r\n[fiddle](http://jsfiddle.net/t394semu/)\r\n\r\n\t<html ng-app=\"store\">\r\n\t<!-- load angular via CDN -->\r\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js\"></script>\r\n\r\n\t<script type=\"text/javascript\">\r\n\t\tvar myapp=angular.module('store',[]);\r\n\t</script>\r\n\r\n\t{{3+4+5}}\r\n\t</html>\r\n\r\n\r\n# Level 1.2: Controllers #\r\n\r\n## Controllers ##\r\n\r\nControllers are where we define our app's behavior by defining functions and values.\r\n\r\n**Creating a controller**\r\n\r\nparameters--> name,anonymous function(will be executed when the controller is called) eg:\r\n\r\n    myapp.controller('myController',function(){\r\n      this.product='tester';\r\n    });\r\n\r\n**Attaching the controller**\r\n\r\nyou can attach a controller by using the directive `ng-controller`, eg:\r\n\r\n    <div ng-controller=\"myController as myctl\">\r\n        <p>{{ myctl.product }}</p>\r\n    </div>\r\n\r\n[fiddle](http://jsfiddle.net/t394semu/1/)\r\n\r\n# Level 1.3: More Directives #\r\n\r\n## ng-show & ng-hide ##\r\n\r\n    myapp.controller('myController',function(){\r\n        this.product=gem;\r\n    });\r\n\r\n    var gem = {\r\n        name: 'Dodecahedron',\r\n        price: 2.65,\r\n        desc: 'Very hard Gem. 10 mall',\r\n        canPurchase: true,\r\n        soldOut:false\r\n    }\r\n\r\n    <div ng-controller=\"myController as myctl\">\r\n        <div ng-hide=\"myctl.product.soldOut\">\r\n         <h1>{{ myctl.product.name }}</h1>\r\n         <h2> ${{ myctl.product.price }}</h2>\r\n        <p>{{ myctl.product.desc }}</p>\r\n        <button ng-show=\"myctl.product.canPurchase\">Add to cart</button>\r\n        </div>\r\n    </div>\r\n\r\n[fiddle](http://jsfiddle.net/t394semu/2/)\r\n\r\n## ng-repeat ##\r\n\r\n    myapp.controller('myController', function () {\r\n        this.products = gems;\r\n    });\r\n    var gems = [{\r\n            name: 'Dodecahedron',\r\n            price: 2.65,\r\n            desc: 'Very hard Gem. 10 mall',\r\n            canPurchase: true,\r\n            soldOut: false\r\n        }, {\r\n            name: 'Penta gem',\r\n            price: 4.35,\r\n            desc: 'Very costly, hard to break',\r\n            canPurchase: false,\r\n            soldOut: false\r\n        }\r\n    ]\r\n\r\n    <div ng-controller=\"myController as myctl\">\r\n        <div ng-repeat=\"product in myctl.products\">\r\n             <h1>{{ product.name }}</h1>\r\n             <h2> ${{ product.price }}</h2>\r\n            <p>{{ product.desc }}</p>\r\n            <button ng-show=\"product.canPurchase\">Add to cart</button><hr />\r\n        </div>\r\n    </div>\r\n\r\n[fiddle](http://jsfiddle.net/t394semu/3/)",
         "updated":"2014-10-10T03:00:26Z",
         "created":"2014-10-09T02:14:56Z",
         "tags":[  
            9,
            26,
            27
         ],
         "title":"A beginners guide to angularjs."
      }
   },
   {  
      "pk":16,
      "model":"blog.blog",
      "fields":{  
         "content":"This is only very beginners example, please see [First steps with Django](http://docs.celeryproject.org/en/2.5/django/first-steps-with-django.html) for more.\r\n\r\n# Configuring your Django project to use Celery\r\n\r\n## requirements\r\n\r\n**Install the `django`,`django-celery`,`SQLAlchemy` library:**\r\n\r\n    django\r\n    django-celery\r\n    SQLAlchemy\r\n\r\n\r\n## Add the following lines to settings.py:\r\n\r\n\t# Add djcelery to INSTALLED_APPS.\r\n\tINSTALLED_APPS = (\r\n\t\t....\r\n\t\t'djcelery',\r\n\t\t.... custom apps\r\n\t)\r\n\r\n\t# load djcelery \r\n    import djcelery\r\n\tdjcelery.setup_loader()\r\n\r\n\t# add SQL Alchemy as broker, see -->http://docs.celeryproject.org/en/2.5/getting-started/brokers/sqlalchemy.html\r\n\tBROKER_URL = 'sqla+sqlite:///celerydb.sqlite'\r\n\r\n## Create the celery database tables.\r\n\r\n\tpython manage.py syncdb\r\n\r\n\r\nThat\u2019s it.\r\n\r\n# Defining and calling tasks\r\n\r\n## create a new app\r\n\r\nFor a simple demonstration create a new Django app called `celerytest` and add the new app to `INSTALLED_APPS`\r\n\r\n\tpython manage.py startapp celerytest\r\n\tINSTALLED_APPS = (\r\n\t    ...,\r\n\t    'djcelery',\r\n\t    'celerytest',\r\n\t)\r\n\r\ncreate some tables, so we can store some data:\r\n\r\n\tfrom django.db import models\r\n\r\n\t# Create your models here.\r\n\tclass Code(models.Model):\t\r\n\t    sub_result=models.TextField(blank=True)\r\n\t    def __unicode__(self):\r\n\t    \treturn self.sub_result\r\n\r\n\r\n\tfrom django.contrib import admin\r\n\tadmin.site.register(Code)\r\n\r\n## celery tasks\r\n\r\nNow you can define your tasks by creating a new file called `celerytest/tasks.py`:\r\n\r\n\tfrom celery import shared_task\r\n\tfrom celerytest.models import Code\r\n\timport datetime\r\n\r\n\t@shared_task\r\n\tdef run_script(sub_id):\t\r\n\t\tm='shared_task at :{}'.format(datetime.datetime.now())\r\n\t\tCode(sub_result=m).save()\r\n\r\n\t\r\n\r\n## Starting the worker process\r\n\r\nIn a production environment you will want to run the worker in the background as a daemon. but for testing you can use the celery worker manage command.\r\n\r\n\tpython manage.py celery worker --loglevel=info\r\n\r\nif there is `periodic task`, you want to run as beat,\r\n\r\n    python manage.py celery worker --loglevel=info -B\r\n\r\n\r\n## Calling our task\r\n\r\n\tfrom celerytest.tasks import run_script\r\n\tresult = run_script.apply_async((1,), countdown=150) # run after 150 seconds\r\n\r\n\r\n# A periodic task example\r\n\r\n## a periodic tasks\r\n\r\n\tfrom celery.decorators import periodic_task\r\n\tfrom celery.task.schedules import crontab\r\n\tfrom celerytest.models import Code\r\n\timport datetime\r\n\r\n\t# A periodic task that will run every minute (the symbol \"*\" means every)\r\n\t@periodic_task(run_every=(crontab()))\r\n\tdef set_sample():\r\n\t    m='periodic_task run at:{}'.format(datetime.datetime.now())\r\n\t    Code(sub_result=m).save()\r\n",
         "updated":"2014-10-16T01:33:32Z",
         "created":"2014-10-16T01:33:32Z",
         "tags":[  
            1,
            28
         ],
         "title":"a basic django celery demo using sqlalchemy as broker"
      }
   },
   {  
      "pk":17,
      "model":"blog.blog",
      "fields":{  
         "content":"## scp ##\r\n\r\n`scp` is similar to `cp`, usage:\r\n\r\n    scp [[user@]from-host:]source-file [[user@]to-host:][destination-file]\r\n\r\n\r\n**from-host**\r\n\r\n> Is the name or IP of the host where the source file is, this can be omitted if the from-host is the host where you are actually issuing the command\r\n\r\n\r\nexample: copy a folder(`static`) from local to webfaction(htdocs folder):\r\n\r\n    scp -r ./static/ suhailvs@suhailvs.webfactional.com:webapps/htdocs\r\n",
         "updated":"2014-11-11T10:55:07Z",
         "created":"2014-11-11T10:55:07Z",
         "tags":[  
            29,
            30
         ],
         "title":"Copy from/to remote server"
      }
   },
   {  
      "pk":18,
      "model":"blog.blog",
      "fields":{  
         "content":"**Here is the answer key of RRC Group D exam conducted on 23 November 2014.**\r\n\r\n1. The Election Commission is consituted every: `permanent body`\r\n2. Which conqueror was born in Macedonia(Europe), died in Babylon(Asia) and buried in Alexandria(Africa): `Alexander the Great`\r\n3. The largest postal network in the world is in: `India`\r\n4. If one dozen calculators cost Rs. 1,020, then how many can be bought for Rs. 765: `9`\r\n5. Which is a pesticide: `DDT`\r\n6. Which is the biggest Indian owned online retailer: `Flipkart`\r\n7. Chest cavity is surrounded by __ of ribs: `12 pairs`\r\n8. Under Indian Constitution, who is the ultimate sovereign: `Indian People`\r\n9. Glycogen is mainly stored in: `Muscles`\r\n10. The High Courts at Mumbai, Calcutta and Chennai were established under the: `Indian High Courts Act 1861`\r\n11. The first country to send man to moon: `USA`\r\n12. The nearest star to Earth(excepting the Sun) in our galaxy is: `Proxima Centaury`\r\n13. Which of the following agricultural products is the largest earner of foreign exchange for india: `Tea`\r\n14. A garden 24m by 14m has a 1m path all along the outer sides, to be covered with tiles. Each tile is 20cm x 20cm. How many tiles are required: `2000`\r\n15. What type of volcano is Vesuvius: `active`\r\n16. The product of (2/5) x (5+(1/4)) gives: `21/10`\r\n17. What line connects the points on a map that have the same temperature: `Isotherm`\r\n18. The outside temperature is 25 degree C. The temperature inside the fridge is 37 degree C less than outside temperature. The temperature in the fridge is: `-12 degree C`\r\n19. Energy is directly or indirectly received from: `Sun`\r\n\r\n\r\n>RRB every year recruits thousands of eligible candidates in various posts in Indian Railways. RRB published the recruitment notification for filling up in various zones. Exam will be start from November 02, 2014 to November 30, 2014 as per Employment Notification in various zones in India.",
         "updated":"2014-11-24T18:55:33Z",
         "created":"2014-11-24T18:55:33Z",
         "tags":[  
            31
         ],
         "title":"RRC Group D Answer Key 2014 (23 Nov Exam)"
      }
   }]
